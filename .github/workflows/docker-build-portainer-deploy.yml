name: Build and Deploy

on:
  push:
    branches:
      - master
      - staging
      - dev

jobs:
  build-and-deploy:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Portainer Secrets
        id: portainer_secrets
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "PORTAINER_URL=${{ secrets.PROD_PORTAINER_URL }}" >> $GITHUB_ENV
            echo "PORTAINER_TOKEN=${{ secrets.PROD_PORTAINER_TOKEN }}" >> $GITHUB_ENV
            echo "STACK_ID=${{ secrets.PROD_STACK_ID }}" >> $GITHUB_ENV
            echo "ENDPOINT_ID=${{ secrets.PROD_ENDPOINT_ID }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "PORTAINER_URL=${{ secrets.STAGING_PORTAINER_URL }}" >> $GITHUB_ENV
            echo "PORTAINER_TOKEN=${{ secrets.STAGING_PORTAINER_TOKEN }}" >> $GITHUB_ENV
            echo "STACK_ID=${{ secrets.STAGING_STACK_ID }}" >> $GITHUB_ENV
            echo "ENDPOINT_ID=${{ secrets.STAGING_ENDPOINT_ID }}" >> $GITHUB_ENV
          else
            echo "PORTAINER_URL=${{ secrets.DEV_PORTAINER_URL }}" >> $GITHUB_ENV
            echo "PORTAINER_TOKEN=${{ secrets.DEV_PORTAINER_TOKEN }}" >> $GITHUB_ENV
            echo "STACK_ID=${{ secrets.DEV_STACK_ID }}" >> $GITHUB_ENV
            echo "ENDPOINT_ID=${{ secrets.DEV_ENDPOINT_ID }}" >> $GITHUB_ENV
          fi

      - name: Debug Secrets (Do not expose sensitive data)
        run: |
          echo "Using Portainer URL: $PORTAINER_URL"
          echo "Using Stack ID: $STACK_ID"
          echo "Using Endpoint ID: $ENDPOINT_ID"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Generate Docker tags
        id: docker_tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest,${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.SHORT_SHA }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          else
            echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.SHORT_SHA }}-${{ env.BRANCH_NAME }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.tags }}

      - name: Deploy to Portainer
        run: |
          COMPOSE_CONTENT=$(cat docker-compose.yml)
          
          PAYLOAD=$(jq -n \
            --arg name "deploy-stack" \
            --arg compose "$COMPOSE_CONTENT" \
            '{
              Name: $name,
              StackFileContent: $compose
            }')

          # Update existing stack
          echo "Attempting to update stack..."
          UPDATE_RESPONSE=$(curl -k -s -w "%{http_code}" \
            -H "X-API-Key: $PORTAINER_TOKEN" \
            -H "Content-Type: application/json" \
            --insecure \
            -X PUT \
            -o update_response.json \
            "$PORTAINER_URL/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
            -d "$PAYLOAD")

          if [[ "$UPDATE_RESPONSE" -eq 404 ]]; then
            echo "Stack does not exist. Creating new stack..."
            
            CREATE_RESPONSE=$(curl -k -s -w "%{http_code}" \
              -H "X-API-Key: $PORTAINER_TOKEN" \
              -H "Content-Type: application/json" \
              --insecure \
              -X POST \
              -o create_response.json \
              "$PORTAINER_URL/api/stacks?type=2&method=string&endpointId=$ENDPOINT_ID" \
              -d "$PAYLOAD")

            if [[ "$CREATE_RESPONSE" -ge 200 && "$CREATE_RESPONSE" -lt 300 ]]; then
              echo "Successfully created new stack"
              cat create_response.json
            else
              echo "Failed to create stack. Status code: $CREATE_RESPONSE"
              cat create_response.json
              exit 1
            fi
          elif [[ "$UPDATE_RESPONSE" -ge 200 && "$UPDATE_RESPONSE" -lt 300 ]]; then
            echo "Successfully updated existing stack"
            cat update_response.json
          else
            echo "Failed to update stack. Status code: $UPDATE_RESPONSE"
            cat update_response.json
            exit 1
          fi
